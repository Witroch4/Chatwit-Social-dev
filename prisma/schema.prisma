datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

enum UserRole {
  DEFAULT
  ADMIN
}

model User {
  id                     String      @id @default(cuid())
  name                   String?
  email                  String      @unique
  emailVerified          DateTime?
  image                  String?
  role                   UserRole    @default(DEFAULT)
  password               String?
  isTwoFactorAuthEnabled Boolean     @default(false)
  twoFactorAuthVerified  DateTime?
  accounts               Account[]
  createdAt              DateTime    @default(now())
  updatedAt              DateTime    @updatedAt
  automacoes             Automacao[]
}

model Account {
  id                String   @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // <<< Novo campo para armazenar o user_id retornado em /me?fields=...,
  //     que Ã© o ID da conta BUSINESS (1784...) >>>
  igUserId          String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String   @unique
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id      String   @id @default(cuid())
  email   String   @unique
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model ResetPasswordToken {
  id      String   @id @default(cuid())
  email   String   @unique
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model Automacao {
  id     String @id @default(cuid())
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  selectedMediaId      String?
  anyMediaSelected     Boolean @default(false)
  selectedOptionPalavra String
  palavrasChave         String?
  fraseBoasVindas       String?
  quickReplyTexto       String?
  mensagemEtapa3        String?
  linkEtapa3            String?
  legendaBotaoEtapa3    String?
  responderPublico      Boolean @default(false)
  pedirEmailPro         Boolean @default(false)
  pedirParaSeguirPro    Boolean @default(false)
  contatoSemClique      Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
