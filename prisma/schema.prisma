datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

enum UserRole {
  DEFAULT
  ADMIN
}

enum SubscriptionStatus {
  ACTIVE
  PAST_DUE
  CANCELED
  UNPAID
  INCOMPLETE
  INCOMPLETE_EXPIRED
}

model User {
  id                     String          @id @default(cuid())
  name                   String?
  email                  String          @unique
  emailVerified          DateTime?
  image                  String?
  role                   UserRole        @default(DEFAULT)
  password               String?
  isTwoFactorAuthEnabled Boolean         @default(false)
  twoFactorAuthVerified  DateTime?
  accounts               Account[]
  createdAt              DateTime        @default(now())
  updatedAt              DateTime        @updatedAt

  // Relação com assinaturas
  subscriptions          Subscription[]

  // Relação com Automacoes
  automacoes             Automacao[]

  // Relação com Pastas
  pastas                 Pasta[]
}

model Account {
  id                String   @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  igUserId          String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String   @unique
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id      String   @id @default(cuid())
  email   String   @unique
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model ResetPasswordToken {
  id      String   @id @default(cuid())
  email   String   @unique
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

/**
 * Automacao
 * - Fica igual ao que você já tinha, exceto que removemos “customerEmail” se não for mais necessário.
 */
model Automacao {
  id                     String   @id @default(cuid())
  userId                 String
  user                   User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  folderId               String?
  folder                 Pasta?   @relation(fields: [folderId], references: [id])

  selectedMediaId        String?
  anyMediaSelected       Boolean  @default(false)
  anyword                Boolean  @default(false)  // NOVO: dispara com qualquer palavra se true
  palavrasChave          String?
  fraseBoasVindas        String?
  quickReplyTexto        String?
  mensagemEtapa3         String?
  linkEtapa3             String?
  legendaBotaoEtapa3     String?
  responderPublico       Boolean  @default(false)
  pedirEmailPro          Boolean  @default(false)
  emailPrompt            String?
  pedirParaSeguirPro     Boolean  @default(false)
  followPrompt           String?  // NOVO: texto pré‑preenchido para pedir para seguir
  contatoSemClique       Boolean  @default(false)
  noClickPrompt          String?  // NOVO: texto pré‑preenchido para caso não cliquem no link
  publicReply            String?  // JSON string das respostas públicas
  buttonPayload          String   @unique
  live                   Boolean  @default(true)
  createdAt              DateTime @default(now())
  updatedAt              DateTime @updatedAt

  leadsAutomacao         LeadAutomacao[]
}



/**
 * Lead
 * - Agora somente guarda dados *gerais* do lead (e.g. e-mail, whatsapp).
 * - Fica com igSenderId como PK.
 * - Remove campos automacaoId, linkSent, waitingForEmail etc.
 */
model Lead {
  igSenderId  String   @id
  email       String?
  whatsapp    String?
  seguidor    Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relação com LeadAutomacao
  automacoesLead LeadAutomacao[]
}

/**
 * Tabela intermediária para 'Lead' participar de várias 'Automacao'.
 * Armazena status *por automação*, como linkSent, waitingForEmail, etc.
 */
model LeadAutomacao {
  id             String   @id @default(cuid())
  leadIgSenderId String
  automacaoId    String
  linkSent       Boolean  @default(false)
  waitingForEmail Boolean @default(false)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // Relações
  lead      Lead      @relation(fields: [leadIgSenderId], references: [igSenderId], onDelete: Cascade)
  automacao Automacao @relation(fields: [automacaoId], references: [id], onDelete: Cascade)

  // Garante que não haja duplicado de (Lead, Automacao)
  @@unique([leadIgSenderId, automacaoId])
}

model Pasta {
  id       String     @id @default(cuid())
  name     String
  userId   String
  user     User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  automacoes Automacao[]
}

model Subscription {
  id                    String               @id @default(cuid())
  userId                String
  user                  User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  stripeSubscriptionId  String               @unique
  stripeCustomerId      String
  status                SubscriptionStatus
  startDate             DateTime
  currentPeriodEnd      DateTime?
  cancelAtPeriodEnd     Boolean              @default(false)
  canceledAt            DateTime?
  createdAt             DateTime             @default(now())
  updatedAt             DateTime             @updatedAt
}
