datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

enum UserRole {
  DEFAULT
  ADMIN
}

enum SubscriptionStatus {
  ACTIVE
  PAST_DUE
  CANCELED
  UNPAID
  INCOMPLETE
  INCOMPLETE_EXPIRED
}

model User {
  id                     String          @id @default(cuid())
  name                   String?
  email                  String          @unique
  emailVerified          DateTime?
  image                  String?
  role                   UserRole        @default(DEFAULT)
  password               String?
  isTwoFactorAuthEnabled Boolean         @default(false)
  twoFactorAuthVerified  DateTime?
  accounts               Account[]
  createdAt              DateTime        @default(now())
  updatedAt              DateTime        @updatedAt
  isNew                  Boolean         @default(true)

  // Relação com assinaturas
  subscriptions          Subscription[]

  // Relação com Automacoes
  automacoes             Automacao[]

  // Relação com Pastas
  pastas                 Pasta[]

  // Relação com Notificações
  notifications          Notification[]

  // Novo modelo para Agendamentos
  agendamentos           Agendamento[]
  
  // Relação com configurações do WhatsApp
  whatsappConfigs        WhatsAppConfig[]
  
  // Relação com templates do WhatsApp
  whatsappTemplates      WhatsAppTemplate[]

  // Relação com sessões de chat de IA
  chatSessions           ChatSession[]
}

model Account {
  id                String   @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  igUserId          String?
  igUsername        String?  // Nome de usuário do Instagram
  isMain            Boolean  @default(false) // Indica se é a conta principal
  automacoes        Automacao[]
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Relações para o chat
  leads             Lead[]
  chats             Chat[]

  // Novo modelo para Agendamentos
  agendamentos      Agendamento[]

  @@unique([provider, providerAccountId])
  @@index([userId])
  @@index([providerAccountId])
  @@map("accounts")
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String   @unique
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id      String   @id @default(cuid())
  email   String   @unique
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model ResetPasswordToken {
  id      String   @id @default(cuid())
  email   String   @unique
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

/**
 * Automacao
 * - Fica igual ao que você já tinha, exceto que removemos "customerEmail" se não for mais necessário.
 */
model Automacao {
  id                     String         @id @default(cuid())
  userId                 String
  user                   User           @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Relacionamento opcional com Pasta (se existir)
  folderId               String?
  folder                 Pasta?         @relation(fields: [folderId], references: [id])

  // Relacionamento com conta do Instagram (obrigatório)
  accountId              String
  account                Account        @relation(fields: [accountId], references: [id], onDelete: Cascade)

  selectedMediaId        String?
  anyMediaSelected       Boolean        @default(false)
  anyword                Boolean        @default(true)
  palavrasChave          String?
  fraseBoasVindas        String?
  quickReplyTexto        String?
  mensagemEtapa3         String?
  linkEtapa3             String?
  legendaBotaoEtapa3     String?
  responderPublico       Boolean        @default(false)
  pedirEmailPro          Boolean        @default(false)
  emailPrompt            String?
  pedirParaSeguirPro     Boolean        @default(false)
  followPrompt           String?
  followButtonPayload    String?
  contatoSemClique       Boolean        @default(false)
  noClickPrompt          String?
  publicReply            String?
  buttonPayload          String         @unique
  live                   Boolean        @default(true)
  createdAt              DateTime       @default(now())
  updatedAt              DateTime       @updatedAt

  leadsAutomacao         LeadAutomacao[]

  @@index([userId])
  @@index([accountId])
}


/**
 * Lead
 * - Agora somente guarda dados *gerais* do lead (e.g. e-mail, whatsapp).
 * - Fica com igSenderId como PK.
 * - Remove campos automacaoId, linkSent, waitingForEmail etc.
 */
model Lead {
  igSenderId  String   @id @default(cuid())
  email       String?
  whatsapp    String?
  seguidor    Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  name        String?  // Nome do lead
  avatar      String?  // URL do avatar do lead
  lastMessage DateTime? // Data da última mensagem
  isOnline    Boolean  @default(false) // Status online/offline
  accountId   String   // ID da conta do Instagram
  account     Account  @relation(fields: [accountId], references: [id], onDelete: Cascade)

  // Relações
  automacoesLead LeadAutomacao[]
  chats         Chat[]

  @@index([accountId])
}

/**
 * Tabela intermediária para 'Lead' participar de várias 'Automacao'.
 * Armazena status *por automação*, como linkSent, waitingForEmail, etc.
 */
model LeadAutomacao {
  id             String   @id @default(cuid())
  leadIgSenderId String
  automacaoId    String
  linkSent       Boolean  @default(false)
  waitingForEmail Boolean @default(false)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // Relações
  lead      Lead      @relation(fields: [leadIgSenderId], references: [igSenderId], onDelete: Cascade)
  automacao Automacao @relation(fields: [automacaoId], references: [id], onDelete: Cascade)

  // Garante que não haja duplicado de (Lead, Automacao)
  @@unique([leadIgSenderId, automacaoId])
}

model Pasta {
  id       String     @id @default(cuid())
  name     String
  userId   String
  user     User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  automacoes Automacao[]
}

model Subscription {
  id                    String               @id @default(cuid())
  userId                String
  user                  User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  stripeSubscriptionId  String               @unique
  stripeCustomerId      String
  status                SubscriptionStatus
  startDate             DateTime
  currentPeriodEnd      DateTime?
  cancelAtPeriodEnd     Boolean              @default(false)
  canceledAt            DateTime?
  createdAt             DateTime             @default(now())
  updatedAt             DateTime             @updatedAt
}

// Modelo para o sistema de notificações
model Notification {
  id          String    @id @default(cuid())
  userId      String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  title       String
  message     String
  isRead      Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([userId])
}

// Novo modelo para Agendamento
model Agendamento {
  id                         String    @id @default(cuid())
  userId                     String    // ID do usuário responsável pelo agendamento
  user                       User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accountId                  String    // ID da conta vinculada ao agendamento (Instagram, Facebook, etc.)
  account                    Account   @relation(fields: [accountId], references: [id], onDelete: Cascade)

  Data                       DateTime  // Data e hora do agendamento
  Descricao                  String?   // Descrição da postagem
  Facebook                   Boolean   @default(false)
  Instagram                  Boolean   @default(false)
  Linkedin                   Boolean   @default(false)
  X                          Boolean   @default(false)
  Stories                    Boolean   @default(false)
  Reels                      Boolean   @default(false)
  PostNormal                 Boolean   @default(false)
  Diario                     Boolean   @default(false)
  Randomizar                 Boolean   @default(false)
  TratarComoUnicoPost        Boolean   @default(false) // Todas as mídias em um único post
  TratarComoPostagensIndividuais Boolean @default(false) // Cada mídia postada individualmente
  Concluido_FB               Boolean   @default(false)
  Concluido_IG               Boolean   @default(false)
  Concluido_LK               Boolean   @default(false)
  Concluido_X                Boolean   @default(false)
  createdAt                  DateTime  @default(now())

  // Relação com mídias
  midias                     Midia[]
}

// Novo modelo para Midia
model Midia {
  id            String      @id @default(cuid())
  agendamento   Agendamento @relation(fields: [agendamentoId], references: [id], onDelete: Cascade)
  agendamentoId String
  url           String      // URL da mídia no MinIO
  mime_type     String      // Tipo da mídia (ex.: image/jpeg, video/mp4)
  thumbnail_url String?     // URL da thumbnail no MinIO (opcional)
  contador      Int         @default(0) // Número de vezes que a mídia foi enviada
  createdAt     DateTime    @default(now())

  @@index([agendamentoId])
}

model Chat {
  id        String   @id @default(cuid())
  leadId    String
  lead      Lead     @relation(fields: [leadId], references: [igSenderId], onDelete: Cascade)
  accountId String
  account   Account  @relation(fields: [accountId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  messages  Message[]

  @@unique([leadId, accountId])
  @@index([accountId])
}

model Message {
  id        String   @id @default(cuid())
  chatId    String
  chat      Chat     @relation(fields: [chatId], references: [id], onDelete: Cascade)
  content   String
  isFromLead Boolean @default(true) // true = mensagem do lead, false = mensagem do usuário
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([chatId])
}

// Modelos para o sistema de Gestão de Leads (Chatwit)

model UsuarioChatwit {
  id            String        @id @default(cuid())
  userId        Int           // ID do usuário no sistema externo
  name          String
  availableName String?
  accountId     Int
  accountName   String
  channel       String        // Ex: "Whatsapp"
  inboxId       Int?
  inboxName     String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  // Relação com leads
  leads         LeadChatwit[]
}

model LeadChatwit {
  id                String        @id @default(cuid())
  sourceId          String        @unique  // ID do lead no sistema externo (ex: número de telefone)
  name              String?
  nomeReal          String?       // Nome real do lead (editável)
  phoneNumber       String?
  email             String?       // Email do lead (editável)
  thumbnail         String?       // URL da thumbnail
  concluido         Boolean       @default(false)
  anotacoes         String?       @db.Text
  pdfUnificado      String?       // URL do PDF unificado
  imagensConvertidas String?      // Lista de URLs das imagens convertidas (JSON)
  leadUrl           String?       // URL para abrir o chat no Chatwit
  fezRecurso        Boolean       @default(false) // Indica se o lead fez recurso
  datasRecurso      String?       // Lista de datas de recursos em formato JSON
  provaManuscrita   Json? // Texto da prova digitalizada
  manuscritoProcessado Boolean    @default(false) // Indica se o manuscrito foi processado
  aguardandoManuscrito Boolean    @default(false) // Indica se está aguardando processamento do manuscrito
  espelhoCorrecao   String?       // Lista de URLs das imagens do espelho em formato JSON
  textoDOEspelho    Json?         // Texto do espelho de correção processado
  analiseUrl        String?       // URL do PDF de análise da prova
  analiseProcessada Boolean       @default(false) // Indica se a análise foi processada
  aguardandoAnalise Boolean       @default(false) // Indica se está aguardando análise
  analisePreliminar Json?         // Dados da pré-análise
  analiseValidada   Boolean       @default(false) // Indica se a análise foi validada pelo usuário
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt

  // Relação com usuário
  usuarioId     String
  usuario       UsuarioChatwit @relation(fields: [usuarioId], references: [id], onDelete: Cascade)

  // Relação com arquivos
  arquivos      ArquivoLeadChatwit[]

  @@index([usuarioId])
  @@index([sourceId])
}

model ArquivoLeadChatwit {
  id            String      @id @default(cuid())
  fileType      String      // "image" ou "pdf"
  dataUrl       String      // URL do arquivo
  pdfConvertido String?     // URL do PDF convertido (se for imagem)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  // Relação com lead
  leadId        String
  lead          LeadChatwit @relation(fields: [leadId], references: [id], onDelete: Cascade)

  @@index([leadId])
}

// Modelo para configurações do WhatsApp
model WhatsAppConfig {
  id                     String    @id @default(cuid())
  whatsappToken          String    @db.Text
  whatsappBusinessAccountId String
  fbGraphApiBase         String
  isActive               Boolean   @default(true)
  createdAt              DateTime  @default(now())
  updatedAt              DateTime  @updatedAt
  userId                 String
  user                   User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

// Modelo para armazenar templates do WhatsApp
model WhatsAppTemplate {
  id                         String   @id @default(cuid())
  /// ID retornado pela API do WhatsApp (único na plataforma)
  templateId                 String
  
  /// Nome do template
  name                       String
  
  /// Status do template (APPROVED, REJECTED, PENDING, etc.)
  status                     String
  
  /// Categoria (ex.: UTILITY, MARKETING, AUTHENTICATION, etc.)
  category                   String
  
  /// Subcategoria, se aplicável (ex.: ORDER_DETAILS, ORDER_STATUS, etc.)
  subCategory                String?
  
  /// Idioma do template (ex.: pt_BR, en_US)
  language                   String
  
  /// JSON com os componentes do template (HEADER, BODY, FOOTER, BUTTONS) e exemplos
  components                 Json
  
  /// Qualidade do template (ex.: GREEN, YELLOW, RED, UNKNOWN)
  qualityScore               String?
  
  /// Categoria correta determinada pelo sistema (se houver)
  correctCategory            String?
  
  /// Indica se o rastreamento de links foi desativado no nível do template
  ctaUrlLinkTrackingOptedOut Boolean?
  
  /// Se o template foi criado a partir de uma biblioteca, guarda o nome original
  libraryTemplateName        String?
  
  /// TTL para envio da mensagem (em segundos)
  messageSendTtlSeconds      Int?
  
  /// Formato dos parâmetros (NAMED ou POSITIONAL)
  parameterFormat            String?
  
  /// Categoria anterior do template, se houver (útil para histórico de edições)
  previousCategory           String?
  
  /// Flag para marcar o template como favorito (ex.: para acesso rápido)
  isFavorite                 Boolean  @default(false)
  
  /// Data da última edição (útil para controle de versão)
  lastEdited                 DateTime?
  
  /// Histórico de edições em formato JSON (ex.: [{ editedAt: Date, changes: {...} }, ...])
  editHistory                Json?
  
  /// URL pública da mídia no MinIO (para vídeos, imagens, etc.)
  publicMediaUrl             String?
  
  createdAt                  DateTime @default(now())
  updatedAt                  DateTime @updatedAt

  // Relação com o usuário que gerencia o template
  userId                     String
  user                       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([name])
}

// Modelos para o ChatwitIA - armazenamento de chats de IA
model ChatSession {
  id          String        @id @default(cuid())
  userId      String
  user        User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  title       String        @default("Nova conversa")
  model       String        @default("chatgpt-4o-latest")
  summary     String?       // Resumo gerado automaticamente da conversa
  messages    ChatMessage[]
  files       ChatFile[]    // Relação com arquivos
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  @@index([userId])
}

model ChatMessage {
  id            String      @id @default(cuid())
  sessionId     String
  session       ChatSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  role          String      // "system", "user", "assistant"
  content       String      @db.Text
  contentType   String      @default("text") // "text", "audio", "image"
  audioData     String?     @db.Text // Base64 de audio, se aplicável
  imageUrl      String?     // URL da imagem, se aplicável
  createdAt     DateTime    @default(now())

  @@index([sessionId])
}

// Modelo para armazenar arquivos associados a sessões de chat
model ChatFile {
  id            String      @id @default(cuid())
  sessionId     String
  session       ChatSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)

  /* NOVOS CAMPOS ----------------------------------------------*/
  storageUrl    String      // URL assinado ou público no MinIO
  openaiFileId  String?     // ID retornado pela OpenAI (nulo enquanto não houver sync)
  status        String      @default("stored") // stored | syncing | synced | failed
  purpose       String?     // user_data | vision | assistants …
  thumbnail_url String?     // URL da thumbnail no MinIO (opcional)
  /* -----------------------------------------------------------*/

  filename      String
  fileType      String
  createdAt     DateTime    @default(now())
  syncedAt      DateTime?   // Quando o arquivo foi aceito pela OpenAI

  @@index([sessionId])
  @@index([openaiFileId])
}

