#Dockerfile.prod
# Etapa 1: Build da aplicação
FROM node:22-slim AS builder

WORKDIR /app

# Declaração dos argumentos de build
ARG DATABASE_URL
ARG AUTH_SECRET
ARG AUTH_LOGIN_REDIRECT
ARG AUTH_TRUST_HOST
ARG INSTAGRAM_SCOPE
ARG NEXT_PUBLIC_INSTAGRAM_APP_ID
ARG INSTAGRAM_APP_SECRET
ARG NEXT_PUBLIC_INSTAGRAM_REDIRECT_URI
ARG IG_GRAPH_API_BASE
ARG FACEBOOK_CLIENT_ID
ARG FACEBOOK_CLIENT_SECRET
ARG FACEBOOK_REDIRECT_URI
ARG AUTH_GOOGLE_ID
ARG AUTH_GOOGLE_SECRET
ARG AUTH_GITHUB_ID
ARG AUTH_GITHUB_SECRET
ARG AUTH_RESEND_KEY
ARG NEXT_PUBLIC_URL
ARG RESEND_EMAIL_FROM
ARG NEXTAUTH_URL
ARG VERIFICATION_URL
ARG VERIFICATION_SUBJECT
ARG OTP_SUBJECT
ARG RESET_PASSWORD_URL
ARG RESET_PASSWORD_SUBJECT
ARG IG_VERIFY_TOKEN
ARG ROOT_PATH
ARG BASEROW_TOKEN
ARG BASEROW_UPLOAD_URL
ARG BASEROW_TABLE_ID
ARG REDIS_HOST
ARG REDIS_PORT
ARG REDIS_PASSWORD
ARG REDIS_USE_TLS
ARG WEBHOOK_URL
ARG BULL_BOARD_SECRET_TOKEN
ARG BULL_BOARD_PORT
ARG NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY
ARG STRIPE_SECRET_KEY
ARG STRIPE_WEBHOOK_SECRET
ARG STRIPE_PRICE_ID

# Define as variáveis de ambiente com os valores dos build args
ENV DATABASE_URL=${DATABASE_URL}
ENV AUTH_SECRET=${AUTH_SECRET}
ENV AUTH_LOGIN_REDIRECT=${AUTH_LOGIN_REDIRECT}
ENV AUTH_TRUST_HOST=${AUTH_TRUST_HOST}
ENV INSTAGRAM_SCOPE=${INSTAGRAM_SCOPE}
ENV NEXT_PUBLIC_INSTAGRAM_APP_ID=${NEXT_PUBLIC_INSTAGRAM_APP_ID}
ENV INSTAGRAM_APP_SECRET=${INSTAGRAM_APP_SECRET}
ENV NEXT_PUBLIC_INSTAGRAM_REDIRECT_URI=${NEXT_PUBLIC_INSTAGRAM_REDIRECT_URI}
ENV IG_GRAPH_API_BASE=${IG_GRAPH_API_BASE}
ENV FACEBOOK_CLIENT_ID=${FACEBOOK_CLIENT_ID}
ENV FACEBOOK_CLIENT_SECRET=${FACEBOOK_CLIENT_SECRET}
ENV FACEBOOK_REDIRECT_URI=${FACEBOOK_REDIRECT_URI}
ENV AUTH_GOOGLE_ID=${AUTH_GOOGLE_ID}
ENV AUTH_GOOGLE_SECRET=${AUTH_GOOGLE_SECRET}
ENV AUTH_GITHUB_ID=${AUTH_GITHUB_ID}
ENV AUTH_GITHUB_SECRET=${AUTH_GITHUB_SECRET}
ENV AUTH_RESEND_KEY=${AUTH_RESEND_KEY}
ENV NEXT_PUBLIC_URL=${NEXT_PUBLIC_URL}
ENV RESEND_EMAIL_FROM=${RESEND_EMAIL_FROM}
ENV NEXTAUTH_URL=${NEXTAUTH_URL}
ENV VERIFICATION_URL=${VERIFICATION_URL}
ENV VERIFICATION_SUBJECT=${VERIFICATION_SUBJECT}
ENV OTP_SUBJECT=${OTP_SUBJECT}
ENV RESET_PASSWORD_URL=${RESET_PASSWORD_URL}
ENV RESET_PASSWORD_SUBJECT=${RESET_PASSWORD_SUBJECT}
ENV IG_VERIFY_TOKEN=${IG_VERIFY_TOKEN}
ENV ROOT_PATH=${ROOT_PATH}
ENV BASEROW_TOKEN=${BASEROW_TOKEN}
ENV BASEROW_UPLOAD_URL=${BASEROW_UPLOAD_URL}
ENV BASEROW_TABLE_ID=${BASEROW_TABLE_ID}
ENV REDIS_HOST=${REDIS_HOST}
ENV REDIS_PORT=${REDIS_PORT}
ENV REDIS_PASSWORD=${REDIS_PASSWORD}
ENV REDIS_USE_TLS=${REDIS_USE_TLS}
ENV WEBHOOK_URL=${WEBHOOK_URL}
ENV BULL_BOARD_SECRET_TOKEN=${BULL_BOARD_SECRET_TOKEN}
ENV BULL_BOARD_PORT=${BULL_BOARD_PORT}
ENV NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY=${NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY}
ENV STRIPE_SECRET_KEY=${STRIPE_SECRET_KEY}
ENV STRIPE_WEBHOOK_SECRET=${STRIPE_WEBHOOK_SECRET}
ENV STRIPE_PRICE_ID=${STRIPE_PRICE_ID}

COPY package*.json ./
COPY prisma ./prisma
COPY . .

# Copia a pasta public para garantir que os arquivos estáticos sejam incluídos
COPY public ./public

RUN npm install
RUN apt-get update -y && apt-get install -y openssl

# Gera a build de produção (se estiver usando Next.js)
RUN npm run build

# Gera os artefatos do Prisma
RUN npx prisma generate

# Etapa 2: Imagem de produção otimizada
FROM node:22-slim

WORKDIR /app

COPY --from=builder /app/package*.json ./
COPY --from=builder /app/node_modules ./node_modules
COPY --from=builder /app/.next ./.next
COPY --from=builder /app/prisma ./prisma
COPY --from=builder /app/server.js ./server.js
COPY --from=builder /app/public ./public
COPY --from=builder /app/dist/worker ./worker
COPY --from=builder /app/dist/lib ./lib



RUN apt-get update && apt-get install -y apparmor-utils

ENV NODE_ENV=production

EXPOSE 3000

CMD [ "node", "server.js" ]
