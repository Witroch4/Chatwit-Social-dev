
services:
  redis:
    container_name: redis
    image: redis:alpine
    command: redis-server --appendonly yes
    ports:
      - "6379:6379"
    networks:
      - minha_rede

  app:
    container_name: chatwit_prod
    image: witrocha/chatwit-social:latest
    build:
      context: .
      dockerfile: Dockerfile.prod
      # Habilita o uso da rede do host durante o build (necessário com BuildKit)
      network: host
      args:
        # Variáveis para build – use REDIS_HOST=localhost para que o contêiner em build
        # possa conectar ao Redis via a porta mapeada no host.
        DATABASE_URL: ${DATABASE_URL}
        AUTH_SECRET: ${AUTH_SECRET}
        AUTH_LOGIN_REDIRECT: ${AUTH_LOGIN_REDIRECT}
        AUTH_TRUST_HOST: ${AUTH_TRUST_HOST}
        INSTAGRAM_SCOPE: ${INSTAGRAM_SCOPE}
        NEXT_PUBLIC_INSTAGRAM_APP_ID: ${NEXT_PUBLIC_INSTAGRAM_APP_ID}
        INSTAGRAM_APP_SECRET: ${INSTAGRAM_APP_SECRET}
        NEXT_PUBLIC_INSTAGRAM_REDIRECT_URI: ${NEXT_PUBLIC_INSTAGRAM_REDIRECT_URI}
        IG_GRAPH_API_BASE: ${IG_GRAPH_API_BASE}
        FACEBOOK_CLIENT_ID: ${FACEBOOK_CLIENT_ID}
        FACEBOOK_CLIENT_SECRET: ${FACEBOOK_CLIENT_SECRET}
        FACEBOOK_REDIRECT_URI: ${FACEBOOK_REDIRECT_URI}
        AUTH_GOOGLE_ID: ${AUTH_GOOGLE_ID}
        AUTH_GOOGLE_SECRET: ${AUTH_GOOGLE_SECRET}
        AUTH_GITHUB_ID: ${AUTH_GITHUB_ID}
        AUTH_GITHUB_SECRET: ${AUTH_GITHUB_SECRET}
        AUTH_RESEND_KEY: ${AUTH_RESEND_KEY}
        NEXT_PUBLIC_URL: ${NEXT_PUBLIC_URL}
        RESEND_EMAIL_FROM: ${RESEND_EMAIL_FROM}
        NEXTAUTH_URL: ${NEXT_PUBLIC_URL}
        VERIFICATION_URL: ${VERIFICATION_URL}
        VERIFICATION_SUBJECT: ${VERIFICATION_SUBJECT}
        OTP_SUBJECT: ${OTP_SUBJECT}
        RESET_PASSWORD_URL: ${RESET_PASSWORD_URL}
        RESET_PASSWORD_SUBJECT: ${RESET_PASSWORD_SUBJECT}
        IG_VERIFY_TOKEN: ${IG_VERIFY_TOKEN}
        ROOT_PATH: ${ROOT_PATH}
        BASEROW_TOKEN: ${BASEROW_TOKEN}
        BASEROW_UPLOAD_URL: ${BASEROW_UPLOAD_URL}
        BASEROW_TABLE_ID: ${BASEROW_TABLE_ID}
        # IMPORTANTE: durante o build, use "localhost" para o REDIS_HOST
        REDIS_HOST: localhost
        REDIS_PORT: 6379
        REDIS_PASSWORD: ${REDIS_PASSWORD}
        REDIS_USE_TLS: ${REDIS_USE_TLS}
        WEBHOOK_URL: ${WEBHOOK_URL}
        BULL_BOARD_SECRET_TOKEN: ${BULL_BOARD_SECRET_TOKEN}
        BULL_BOARD_PORT: ${BULL_BOARD_PORT}
        NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY: ${NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY}
        STRIPE_SECRET_KEY: ${STRIPE_SECRET_KEY}
        STRIPE_WEBHOOK_SECRET: ${STRIPE_WEBHOOK_SECRET}
        STRIPE_PRICE_ID: ${STRIPE_PRICE_ID}
        S3AccessKey: ${S3AccessKey}
        S3SecretKey: ${S3SecretKey}
        S3Bucket: ${S3Bucket}
        S3Endpoint: ${S3Endpoint}
        ILOVEPDF_PUBLIC_KEY: ${ILOVEPDF_PUBLIC_KEY}
        ILOVEPDF_SECRET_KEY: ${ILOVEPDF_SECRET_KEY}
    env_file:
      - .env.production
    environment:
      NODE_ENV: production
      # Em runtime, a aplicação deverá encontrar o contêiner Redis via DNS do Docker
      REDIS_HOST: redis
    ports:
      - "3000:3000"
      - "3005:3005"
    volumes:
      - ./temp:/app/temp
    networks:
      - minha_rede
    restart: unless-stopped

networks:
  minha_rede:
    external: true
