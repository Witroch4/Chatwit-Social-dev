services:
  app:
    container_name: chatwit_dev
    build:
      context: .
      dockerfile: Dockerfile.dev
    env_file:
      - .env.development
    environment:
      # Configurações para detecção de alterações em tempo real
      WATCHPACK_POLLING: "true"
      CHOKIDAR_USEPOLLING: "true"
      FAST_REFRESH: "true"
      NEXT_WEBPACK_USEPOLLING: "true"
      NEXT_SCRIPT: dev:polling
      
      # Redis (ajuste para apontar para o container redis)
      REDIS_HOST: "redis"
      REDIS_PORT: "6379"
      
    ports:
      - "3000:3000"
      - "3005:3005" # Porta para o Bull Board
    volumes:
      # Mapeia o repositório local para /src no container
      - .:/src
      # Volume para node_modules
      - node_modules:/src/node_modules

      # Pasta temporária
      - ./temp:/src/temp
    command: sh -c "npm run ${NEXT_SCRIPT:-dev}"
    networks:
      - minha_rede
    develop:
      watch:
        - action: sync
          path: .
          target: /src
          ignore:
            - node_modules/
            - ".git/"
            - "Dockerfile*"
            - "docker-compose*.yml"
        - action: rebuild
          path: package.json
    restart: unless-stopped
    depends_on:
      - redis
  
  # Serviço Redis usando imagem redis:7-alpine
  redis:
    image: redis:7-alpine
    container_name: chatwit_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - minha_rede
    restart: unless-stopped
    
  # Serviço ngrok
  ngrok:
    image: ngrok/ngrok:latest
    container_name: chatwit_ngrok
    env_file:
      - .env.development
    command: http app:3000 --domain=funny-direct-colt.ngrok-free.app
    environment:
      - NGROK_AUTHTOKEN=2uo7DZcOBaccynlt2Wq8gVULqJ3_36ywaedyqoJRNq1zNRUDf
    networks:
      - minha_rede
    depends_on:
      - app
    restart: unless-stopped

volumes:
  node_modules:
    driver: local
  redis_data:
    driver: local

networks:
  minha_rede:
    external: true
    name: minha_rede
