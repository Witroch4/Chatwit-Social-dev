// server.js

const { createServer } = require("https");
const { parse } = require("url");
const next = require("next");
const fs = require("fs");
const path = require("path");
const { spawn } = require("child_process");

const dev = process.env.NODE_ENV !== "production";
const app = next({ dev });
const handle = app.getRequestHandler();

const httpsOptions = {
  key: fs.readFileSync(path.join(__dirname, "localhost-key.pem")),
  cert: fs.readFileSync(path.join(__dirname, "localhost.pem")),
};

app.prepare().then(() => {
  const server = createServer(httpsOptions, (req, res) => {
    const parsedUrl = parse(req.url, true);
    handle(req, res, parsedUrl);
  });

  // **Armazenamos as conexões ativas**
  const connections = new Set();

  // Quando alguém se conecta, guardamos a conexão
  server.on("connection", (socket) => {
    connections.add(socket);
    // Quando a conexão fecha, removemos do Set
    socket.on("close", () => {
      connections.delete(socket);
    });
  });

  // Iniciar o servidor
  server.listen(3000, (err) => {
    if (err) throw err;
    console.log("> Servidor HTTPS rodando em https://localhost:3000");
  });

  // Iniciar o processo do worker
  const worker = spawn(
    "ts-node",
    ["-r", "tsconfig-paths/register", "worker/webhook.worker.ts"],
    {
      stdio: "inherit",
      env: process.env,
      shell: true,
    }
  );

  worker.on("close", (code) => {
    console.log(`> Processo do worker finalizado com o código ${code}`);
  });

  // Função para encerrar tudo
  const shutdown = () => {
    console.log("> Encerrando servidor e worker...");

    // 1) Fechar conexões ativas
    for (const conn of connections) {
      conn.destroy(); // encerra a conexão imediatamente
    }

    // 2) Fechar o servidor
    server.close(() => {
      console.log("> Servidor encerrado.");

      // 3) Matar o worker
      worker.kill();

      // 4) Encerrar o processo principal
      process.exit(0);
    });
  };

  process.on("SIGINT", shutdown);
  process.on("SIGTERM", shutdown);
});
